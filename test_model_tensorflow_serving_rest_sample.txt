(tensorflow_p36) [ec2-user@ipxxxxx]$ ls ~/2019_mlai_workship_sample_data/images/test1.jpg 
/home/ec2-user/2019_mlai_workship_sample_data/images/test1.jpg
(tensorflow_p36) [ec2-user@ipxxxxx]$ python
Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56) 
[GCC 7.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
KeyboardInterrupt
>>> test_image_path = '/home/ec2-user/2019_mlai_workship_sample_data/images/test1.jpg'
>>> import requests
>>> import numpy as np
>>> import json 
>>> from matplotlib import pyplot as plt
>>> from PIL import Image
>>> from __future__ import print_function
>>> 
>>> ## the object detection util from https://github.com/tensorflow/models/tree/master/research/object_detection
>>> from object_detection.utils import ops as utils_ops
>>> 
>>> from object_detection.utils import label_map_util
>>> 
>>> from object_detection.utils import visualization_utils as vis_util
>>> MODEL_NAME = "sample_model"
>>> 
>>> # The server URL specifies the endpoint of your server running the ResNet
... # model with the name "resnet" and using the predict interface.
... SERVER_URL = 'http://localhost:8501/v1/models/%s:predict' % MODEL_NAME
>>> IMAGE_PATH=test_image_path
>>> IMAGE_SIZE = (12, 8)
>>> 
>>> PATH_TO_LABELS="/home/ec2-user/Category.pdtxt"
>>> category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS)
>>> 
>>> 
>>> 
>>> def load_image_into_numpy_array(image):
...   (im_width, im_height) = image.size
...   return np.array(image.getdata()).reshape(
...       (im_height, im_width, 3)).astype(np.uint8)
... 
>>> 
>>> 
>>> headers = {"content-type": "application/json"}
>>> image = Image.open(IMAGE_PATH)
>>> image_np = load_image_into_numpy_array(image)
>>> image_np_expanded = np.expand_dims(image_np, axis=0)
>>> 
>>> data = json.dumps({"signature_name": "serving_default", "instances": image_np_expanded.tolist()})
>>> 
>>> json_response = requests.post('http://localhost:8501/v1/models/sample_model:predict', data=data, headers=headers)
>>> 
>>> predictions = json.loads(json_response.text)['predictions']
>>> 
>>> output_dict={}
>>> output_dict['num_detections'] = int(predictions[0]['num_detections'])
>>> output_dict['detection_classes'] = np.array(predictions[0]['detection_classes']).astype(np.int64)
>>> output_dict['detection_boxes'] = np.array(predictions[0]['detection_boxes'])
>>> output_dict['detection_scores'] = np.array(predictions[0]['detection_scores'])
>>> output_dict
{'num_detections': 100, 'detection_classes': array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), 'detection_boxes': array([[0.37548417, 0.17187716, 0.47656342, 0.3012276 ],
       [0.63068187, 0.85286742, 0.75563306, 0.99981165],
       [0.01248423, 0.86071342, 0.42099866, 1.        ],
       [0.71865332, 0.30883682, 0.89384717, 0.44285518],
       [0.02613871, 0.58048308, 0.29275569, 0.71660066],
       [0.01531456, 0.01748167, 0.39402893, 0.17226799],
       [0.42255431, 0.85949343, 0.54207605, 0.99569213],
       [0.81921917, 0.7202127 , 0.90423608, 0.85983014],
       [0.45070195, 0.44554815, 0.5628143 , 0.58055294],
       [0.83928728, 0.85547704, 0.90986311, 1.        ],
       [0.58281511, 0.02250158, 0.93042111, 0.174919  ],
       [0.48323718, 0.1686995 , 0.71440905, 0.30712408],
       [0.0277428 , 0.44507086, 0.451581  , 0.57647669],
       [0.29329783, 0.580919  , 0.53193504, 0.71423739],
       [0.02717767, 0.30368918, 0.40348575, 0.44183391],
       [0.64777935, 0.58225006, 0.72807789, 0.71793896],
       [0.4527449 , 0.71961915, 0.82099217, 0.85248017],
       [0.72350413, 0.16927157, 0.84227794, 0.31022012],
       [0.20742021, 0.16964404, 0.32066026, 0.300924  ],
       [0.73067552, 0.58116549, 0.79683346, 0.71898431],
       [0.75577688, 0.85508168, 0.83870769, 0.99610484],
       [0.03009428, 0.16830587, 0.15034756, 0.30398509],
       [0.58406579, 0.582058  , 0.64796561, 0.71689129],
       [0.22121198, 0.71854567, 0.44842166, 0.85747194],
       [0.40764815, 0.30569398, 0.70712525, 0.44134289],
       [0.03023087, 0.72031188, 0.2054702 , 0.85478455],
       [0.56662607, 0.44652227, 0.65706891, 0.579451  ],
       [0.52062029, 0.580367  , 0.58057815, 0.71155977],
       [0.31724232, 0.1726899 , 0.36953452, 0.30162564],
       [0.91665274, 0.85625154, 0.97175389, 0.99767429],
       [0.38790923, 0.02419504, 0.44037214, 0.16868763],
       [0.9030484 , 0.30721298, 0.96938127, 0.43800926],
       [0.65967172, 0.44715643, 0.75595546, 0.58317023],
       [0.79930741, 0.58428145, 0.87625569, 0.72043234],
       [0.76485264, 0.44224927, 0.92929178, 0.58194417],
       [0.90617561, 0.72280705, 0.97311169, 0.85526574],
       [0.54462188, 0.85779697, 0.62543273, 0.99509817],
       [0.89488637, 0.1728836 , 0.932346  , 0.3071261 ],
       [0.84210712, 0.17512216, 0.89367688, 0.3020688 ],
       [0.14366022, 0.16194585, 0.20374107, 0.30462804],
       [0.89153314, 0.58509368, 0.96727765, 0.72252822],
       [0.44529006, 0.03193608, 0.57944655, 0.16577287],
       [0.93601668, 0.17077112, 0.96203846, 0.30351746],
       [0.92804611, 0.44769833, 0.982783  , 0.58004349],
       [0.93360734, 0.0293548 , 0.97337395, 0.16706176],
       [0.87895936, 0.579143  , 0.908394  , 0.71452355],
       [0.5482955 , 0.02868338, 0.57468981, 0.16467516],
       [0.76652271, 0.7189554 , 0.81298673, 0.85647577],
       [0.96950519, 0.29998702, 0.98808545, 0.44316387],
       [0.45108169, 0.02276165, 0.46653986, 0.16340858],
       [0.88038975, 0.57748026, 0.89556318, 0.71804196],
       [0.86496711, 0.58318943, 0.87949735, 0.71793568],
       [0.91039783, 0.85537744, 0.92331171, 0.99027771],
       [0.91968554, 0.85673487, 0.93783838, 0.99345744],
       [0.43826279, 0.02685314, 0.4536303 , 0.16750836],
       [0.57755768, 0.43857294, 0.72858036, 0.5781759 ],
       [0.49963838, 0.03082434, 0.55783772, 0.1677518 ],
       [0.58502948, 0.58365291, 0.62084556, 0.71312863],
       [0.96119964, 0.85745615, 0.97959155, 0.99439567],
       [0.79395175, 0.58137333, 0.80806154, 0.72100431],
       [0.96320206, 0.58291811, 0.983899  , 0.72128421],
       [0.03650209, 0.16582492, 0.10015908, 0.31064379],
       [0.80352366, 0.71701121, 0.81753522, 0.85147136],
       [0.67289382, 0.30271608, 0.70804882, 0.44205525],
       [0.65217269, 0.58002961, 0.69360274, 0.71855706],
       [0.7689144 , 0.44400239, 0.84483916, 0.57979017],
       [0.3869341 , 0.71768493, 0.44772753, 0.85893351],
       [0.16920452, 0.71776164, 0.20560133, 0.84997875],
       [0.8511852 , 0.4446694 , 0.91895592, 0.58033091],
       [0.89818829, 0.71772563, 0.91094774, 0.85290754],
       [0.9084726 , 0.72280228, 0.93828344, 0.84991288],
       [0.80034578, 0.58250451, 0.820145  , 0.7179901 ],
       [0.63496095, 0.859718  , 0.70595461, 1.        ],
       [0.52168667, 0.03628621, 0.56407535, 0.16193189],
       [0.88968945, 0.5810433 , 0.91983122, 0.71624494],
       [0.46665   , 0.02943038, 0.52871907, 0.16993034],
       [0.75593567, 0.58193463, 0.79464281, 0.72078216],
       [0.92540139, 0.5891971 , 0.96723264, 0.71798491],
       [0.9439289 , 0.16878962, 0.976757  , 0.30032706],
       [0.65537196, 0.31256849, 0.70529842, 0.43899161],
       [0.6478067 , 0.58193737, 0.66644609, 0.71925509],
       [0.72858155, 0.44353136, 0.75511247, 0.57566231],
       [0.57926923, 0.579245  , 0.59673464, 0.71058232],
       [0.46563163, 0.1618793 , 0.48171702, 0.29619577],
       [0.45169613, 0.02614882, 0.48569372, 0.16480722],
       [0.54912126, 0.44399786, 0.56453317, 0.57840329],
       [0.94963747, 0.72651684, 0.97917831, 0.84760958],
       [0.97365171, 0.02717906, 0.99094307, 0.16477725],
       [0.61790747, 0.85758293, 0.633752  , 0.9954831 ],
       [0.3632836 , 0.29917511, 0.39973235, 0.43529752],
       [0.80050606, 0.85645753, 0.83656371, 0.99388921],
       [0.68426567, 0.58245474, 0.72541434, 0.71361208],
       [0.37492076, 0.16807096, 0.39264464, 0.30763981],
       [0.77003169, 0.44696295, 0.81712574, 0.57687557],
       [0.80594188, 0.58461738, 0.83943605, 0.72305244],
       [0.46066275, 0.02680231, 0.50486082, 0.16760217],
       [0.10515728, 0.1619347 , 0.14676085, 0.30361766],
       [0.72001088, 0.57794338, 0.73575717, 0.71528339],
       [0.8357175 , 0.8467508 , 0.84967208, 0.98947847],
       [0.73158944, 0.58268392, 0.752876  , 0.71725953]]), 'detection_scores': array([0.98237085, 0.98210043, 0.98012984, 0.9795686 , 0.97930908,
       0.97853661, 0.9771145 , 0.97544575, 0.97478765, 0.97299111,
       0.97271043, 0.97039336, 0.968095  , 0.96705705, 0.96449459,
       0.96367282, 0.95993006, 0.95920408, 0.95729524, 0.95698512,
       0.95548576, 0.95438957, 0.9526161 , 0.95173723, 0.95092005,
       0.94771242, 0.9406324 , 0.939505  , 0.933142  , 0.93145871,
       0.92997241, 0.92585468, 0.91546351, 0.91398227, 0.9131099 ,
       0.90763962, 0.90229058, 0.877303  , 0.85412216, 0.825679  ,
       0.78489834, 0.67927915, 0.55928093, 0.5284155 , 0.32057536,
       0.31296071, 0.13123135, 0.0990549 , 0.04230383, 0.04171657,
       0.03446073, 0.02547979, 0.02400084, 0.02358497, 0.02295092,
       0.02282456, 0.02076293, 0.0196276 , 0.01935034, 0.01551088,
       0.01469621, 0.01429495, 0.01333293, 0.01259214, 0.0114001 ,
       0.01100383, 0.00998042, 0.00996721, 0.00969323, 0.00936785,
       0.00863078, 0.00854014, 0.0084668 , 0.00827099, 0.00766999,
       0.0076229 , 0.00735786, 0.00662035, 0.00654987, 0.00616358,
       0.0054956 , 0.00549388, 0.00539386, 0.00487007, 0.0046096 ,
       0.00460848, 0.00456269, 0.00431237, 0.00430587, 0.00420405,
       0.00399376, 0.0031886 , 0.0031212 , 0.00302399, 0.00297599,
       0.00273625, 0.00254954, 0.00241653, 0.0022924 , 0.00214308])}
>>> 
>>> 
>>> 
>>> vis_util.visualize_boxes_and_labels_on_image_array(
...         image_np,
...         output_dict['detection_boxes'],
...         output_dict['detection_classes'],
...         output_dict['detection_scores'],
...         category_index,
...         instance_masks=output_dict.get('detection_masks'),
...         use_normalized_coordinates=True,
...         line_thickness=8)
array([[[254, 254, 254],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [255, 255, 255],
        [252, 252, 252],
        [254, 254, 254]],

       [[255, 255, 255],
        [255, 255, 255],
        [254, 254, 254],
        ...,
        [254, 254, 254],
        [250, 250, 250],
        [255, 255, 255]],

       [[251, 251, 251],
        [250, 250, 250],
        [249, 249, 249],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [254, 254, 254]],

       ...,

       [[251, 251, 251],
        [237, 237, 237],
        [197, 197, 197],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[232, 232, 232],
        [152, 152, 152],
        [118, 118, 118],
        ...,
        [252, 252, 252],
        [255, 255, 255],
        [255, 255, 255]],

       [[249, 249, 249],
        [235, 235, 235],
        [250, 250, 250],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]]], dtype=uint8)
>>> plt.figure(figsize=IMAGE_SIZE)
<Figure size 1200x800 with 0 Axes>
>>> plt.imsave('temp.png', image_np)
>>> plt.close('all')
>>> quit()