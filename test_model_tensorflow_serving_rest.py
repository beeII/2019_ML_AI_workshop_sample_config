## https://www.tensorflow.org/tfx/serving/tutorials/Serving_REST_simple#make_rest_requests
## start model serving 
## tensorflow_model_server  --port=8500 --rest_api_port=8501 --model_config_file=/home/ec2-user/sample_model/sample_model.config > tensorflowserving.log
from __future__ import print_function
import requests
import numpy as np
from matplotlib import pyplot as plt
from PIL import Image
import json 

from object_detection.utils import ops as utils_ops

from object_detection.utils import label_map_util

from object_detection.utils import visualization_utils as vis_util



MODEL_NAME = "sample_model"

# The image URL is the location of the image we should send to the server
#IMAGE_PATH = 'https://tensorflow.org/images/blogs/serving/cat.jpg'
IMAGE_PATH = '/home/ec2-user/2019_mlai_workship_sample_data/images/test1.jpg'

TEST_IMAGES_PATH='/home/ec2-user/2019_mlai_workship_sample_data/images/test1_output.jpg'

IMAGE_SIZE = (12, 8)
# The server URL specifies the endpoint of your server running the ResNet
# model with the name "resnet" and using the predict interface.
SERVER_URL = 'http://localhost:8501/v1/models/%s:predict' % MODEL_NAME

def load_image_into_numpy_array(image):
  (im_width, im_height) = image.size
  return np.array(image.getdata()).reshape(
      (im_height, im_width, 3)).astype(np.uint8)


headers = {"content-type": "application/json"}
image = Image.open(IMAGE_PATH)
image_np = load_image_into_numpy_array(image)
image_np_expanded = np.expand_dims(image_np, axis=0)

PATH_TO_LABELS="/home/ec2-user/Category.pdtxt"
category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS)


data = json.dumps({"signature_name": "serving_default", "instances": image_np_expanded.tolist()})

json_response = requests.post('http://localhost:8501/v1/models/sample_model:predict', data=data, headers=headers)
predictions = json.loads(json_response.text)['predictions']

####
## predictions
## [{'detection_boxes': [[0.0741598755, 0.721887648, 0.520343304, 0.9846735], [0.215851873, 0.0479948074, 0.386461049, 0.187539771], [0.531586, 0.587543786, 0.976093471, 0.995840788], [0.617933929, 0.0338914134, 0.996637762, 0.339788973], [0.0214091428, 0.0439844392, 0.211860135, 0.185103983], [0.39613235, 0.0547767766, 0.609594822, 0.191331446], [0.306542724, 0.451978356, 0.534631, 0.586574137], [0.024179358, 0.58958745, 0.165475354, 0.71694392], [0.839600623, 0.329850972, 0.962814391, 0.454449892], [0.323799968, 0.325026333, 0.465099841, 0.451046497], [0.624909639, 0.321380049, 0.69057107, 0.453063935], [0.696622491, 0.320871651, 0.827418387, 0.45705241], [0.0342713259, 0.320611924, 0.31388396, 0.447929233], [0.0213383809, 0.187481, 0.0700505227, 0.311876297], [0.0408507437, 0.451249957, 0.281201243, 0.579099894], [0.568813682, 0.323242277, 0.621340692, 0.452212423], [0.474939704, 0.328207344, 0.570849061, 0.446377218], [0.191574484, 0.590360403, 0.52346909, 0.725033], [0.590495706, 0.193967208, 0.617747843, 0.319224834], [0.317715645, 0.188796699, 0.589889467, 0.321813107], [0.0776121318, 0.186771557, 0.130150303, 0.313130647], [0.165499538, 0.581188798, 0.194020376, 0.710180819], [0.0976286307, 0.188962683, 0.302112669, 0.315760225], [0.556142271, 0.459541023, 0.91937393, 0.587075293], [0.590649366, 0.0298960377, 0.953014314, 0.891235471], [0.80549711, 0.316286057, 0.828157246, 0.454744786], [0.0312169529, 0.305846, 0.445499152, 0.981540561], [0.139244065, 0.183404505, 0.163214937, 0.306084514], [0.0822001, 0.0146290595, 0.511643052, 0.953258514], [0.948991716, 0.329397202, 0.965420485, 0.454389364], [0.291938543, 0.185432658, 0.337767154, 0.319002688], [0.019110946, 0.711721063, 0.0668151826, 0.885665715], [0.04194564, 0.0, 0.456307918, 0.715295434], [0.524416, 0.447806954, 0.537961721, 0.584261239], [0.16667521, 0.579369366, 0.183581337, 0.713593125], [0.262025058, 0.449022681, 0.292277753, 0.584084511], [0.837783456, 0.320597559, 0.858592272, 0.453491032], [0.840928316, 0.461451381, 0.884164214, 0.59629941], [0.0853116959, 0.188828051, 0.117943697, 0.308356464], [0.0732958093, 0.186584368, 0.0874082521, 0.316127926], [0.836285114, 0.462647855, 0.970162392, 0.591713309], [0.536410213, 0.447430283, 0.547534525, 0.585421622], [0.179822758, 0.184975639, 0.219746098, 0.311200678], [0.0192673318, 0.0153033454, 0.304497391, 0.674510896], [0.0504379161, 0.18513675, 0.0722861215, 0.315669894], [0.144112259, 0.183044523, 0.178631917, 0.309300244], [0.230490059, 0.185157403, 0.267271668, 0.310801476], [0.0105926059, 0.429601818, 0.0223172642, 0.590460658], [0.319434166, 0.186212972, 0.351447433, 0.317603767], [0.695430636, 0.3170726, 0.707636416, 0.456442893], [0.474832863, 0.590630412, 0.519032419, 0.732980967], [0.867995799, 0.469443768, 0.95166558, 0.589805543], [0.0192017257, 0.663869, 0.068145059, 0.973577619], [0.835164666, 0.319563538, 0.850297391, 0.453301311], [0.556003273, 0.193529204, 0.584829271, 0.323590457], [0.0599179417, 0.719995618, 0.0756732225, 0.912534], [0.54451555, 0.450858325, 0.556158543, 0.588766456], [0.250382215, 0.321255267, 0.307400852, 0.453584254], [0.011472214, 0.29346773, 0.0220470931, 0.452534854], [0.516497, 0.324439108, 0.563188672, 0.445184529], [0.287781298, 0.44340995, 0.299910665, 0.585095406], [0.572025716, 0.448706985, 0.6143381, 0.577523708], [0.0154375704, 0.304754853, 0.0304840505, 0.447800964], [0.154628873, 0.185187131, 0.187887907, 0.313493907], [0.420463651, 0.325642735, 0.463146091, 0.448518634], [0.682707965, 0.317956, 0.696208656, 0.451830208], [0.933042824, 0.330955982, 0.953092337, 0.458916038], [0.909512579, 0.469315201, 0.947648585, 0.595878303], [0.891625524, 0.469038814, 0.932297945, 0.592890859], [0.937652528, 0.467413753, 0.96132952, 0.599458218], [0.561462522, 0.319982946, 0.575825274, 0.44500947], [0.176520035, 0.581080437, 0.204326987, 0.708575964], [0.566810191, 0.0, 0.926536679, 0.595985], [0.334530711, 0.185847014, 0.359735847, 0.316381752], [0.602319777, 0.448626429, 0.630773842, 0.577800512], [0.92101109, 0.469282895, 0.953165352, 0.599881768], [0.0120108882, 0.0334563218, 0.0222772676, 0.209070668], [0.190541893, 0.184975773, 0.237911656, 0.315755129], [0.323691726, 0.319778472, 0.406380236, 0.451443285], [0.546891272, 0.451001406, 0.562469423, 0.585574746], [0.0333754867, 0.441447914, 0.0545028634, 0.584172845], [0.0229038186, 0.218788311, 0.290620685, 0.915369272], [0.697904587, 0.317529, 0.715845525, 0.454253405], [0.125000209, 0.184871063, 0.147990599, 0.309374332], [0.22403802, 0.00978007, 0.577672362, 0.687459528], [0.490373135, 0.590109587, 0.522289276, 0.73208946], [0.603539288, 0.190834522, 0.629275203, 0.326330721], [0.88277173, 0.465860397, 0.921656966, 0.590758085], [0.617170215, 0.450581938, 0.641724467, 0.579863667], [0.864033759, 0.465853125, 0.905992568, 0.593289435], [0.313935906, 0.0, 0.649539828, 0.621136], [0.358160138, 0.183708623, 0.37988323, 0.315651238], [0.255429685, 0.185629025, 0.279088229, 0.315951854], [0.585252285, 0.187785968, 0.60455966, 0.31412369], [0.639842749, 0.451104045, 0.676854, 0.581292331], [0.827582657, 0.318108469, 0.839810371, 0.454478621], [0.622450769, 0.322403133, 0.638833046, 0.445390016], [0.210026056, 0.186833799, 0.24931705, 0.313776553], [0.562039375, 0.44944185, 0.595061362, 0.581305146], [0.769034922, 0.460554212, 0.827011228, 0.589546204]], 
##.  'detection_scores': [0.987723, 0.986967385, 0.982285619, 0.975175738, 0.96009475, 0.959734559, 0.958447, 0.950612, 0.926811397, 0.925110698, 0.920954, 0.904483616, 0.88116169, 0.85301286, 0.852898479, 0.841304481, 0.801531494, 0.689510942, 0.681665719, 0.613982558, 0.371225983, 0.216083273, 0.189674616, 0.173725352, 0.124594614, 0.0815277, 0.07725095, 0.073157683, 0.0729391128, 0.0713250563, 0.0706870407, 0.066247575, 0.0615735129, 0.0612235591, 0.0598994866, 0.0594868734, 0.0509361476, 0.0479181036, 0.0440777428, 0.043697834, 0.0433997288, 0.0426919, 0.0418460108, 0.0383603796, 0.0381332301, 0.0345877632, 0.0320576653, 0.0314893462, 0.0312619768, 0.0303590279, 0.0294032488, 0.0284793936, 0.028414201, 0.0278860163, 0.0267586112, 0.0246628541, 0.0237369966, 0.0225579, 0.0217935704, 0.0213097744, 0.020693671, 0.0202939678, 0.0201397371, 0.0189195052, 0.0186242238, 0.0184686612, 0.0177458469, 0.0176153872, 0.0172405243, 0.0170761757, 0.015969241, 0.0149599109, 0.0144275371, 0.0143796522, 0.0139833353, 0.0138800591, 0.0137859527, 0.0133410683, 0.0132803405, 0.0127069354, 0.0124488613, 0.0124202045, 0.0123109343, 0.0120195476, 0.0112584382, 0.0110540316, 0.0109816184, 0.0107944803, 0.0102461539, 0.0101396013, 0.0099836411, 0.00986186229, 0.00976802502, 0.00976349134, 0.00915766414, 0.00885384716, 0.008441207, 0.00794617739, 0.00787424855, 0.00787024], 
##   'detection_classes': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 
##   'num_detections': 100.0}]
####
output_dict={}
output_dict['num_detections'] = int(predictions[0]['num_detections'])
output_dict['detection_classes'] = np.array(predictions[0]['detection_classes']).astype(np.int64)
output_dict['detection_boxes'] = np.array(predictions[0]['detection_boxes'])
output_dict['detection_scores'] = np.array(predictions[0]['detection_scores'])

vis_util.visualize_boxes_and_labels_on_image_array(
        image_np,
        output_dict['detection_boxes'],
        output_dict['detection_classes'],
        output_dict['detection_scores'],
        category_index,
        instance_masks=output_dict.get('detection_masks'),
        use_normalized_coordinates=True,
        line_thickness=8)
plt.figure(figsize=IMAGE_SIZE)
plt.imsave(TEST_IMAGES_PATH, image_np)
plt.close('all')